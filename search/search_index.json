{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Shared Intelligence","text":"<p>Tips &amp; war stories from the ML\u2011engineering trenches.</p> <p>\ud83d\udc4b Hi, I'm Slava!</p> <p>I'm a AI Engineer passionate about navigating the complexities of shipping models to production.</p> <p>This blog serves as my digital collection of tips and tricks I've learned in my journey of machine learning.</p>"},{"location":"#what-youll-find-here","title":"What You'll Find Here","text":"<p>In this blog, you'll find:</p> <ul> <li>Technical tutorials and guides</li> <li>Machine Learning insights</li> <li>Best practices and tips</li> <li>Personal experiences and learnings</li> </ul> <p>My goal is to create a valuable resource for fellow practitioners and anyone interested in the real-world application of machine learning.</p>"},{"location":"topics/","title":"\ud83d\udd0e Browse by Topic","text":""},{"location":"topics/#tag:python","title":"Python","text":"<ul> <li>            Managing Python on macOS with uv          </li> </ul>"},{"location":"topics/#tag:tooling","title":"Tooling","text":"<ul> <li>            Managing Python on macOS with uv          </li> </ul>"},{"location":"topics/#tag:tutorial","title":"Tutorial","text":"<ul> <li>            Managing Python on macOS with uv          </li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2025/04/17/managing-python-on-macos-with-uv/","title":"Managing Python like an ML\u00a0Engineer on macOS with uv","text":"","tags":["Tooling","Python","Tutorial"]},{"location":"blog/2025/04/17/managing-python-on-macos-with-uv/#tldr-bash-cheatsheet","title":"TL;DR Bash\u00a0Cheat\u2011sheet","text":"<pre><code>brew install uv        # install tool\nuv python install 3.12 # grab interpreter\nuv python pin          # lock version for repo\nuv venv                # create .venv\nuv pip install numpy pandas   # ML staples\nuv run train.py        # run with correct interpreter\nuv self upgrade        # update uv itself\n</code></pre>","tags":["Tooling","Python","Tutorial"]},{"location":"blog/2025/04/17/managing-python-on-macos-with-uv/#why-i-migrated-to-uv-and-you-should-too","title":"\ud83c\udf19 Why I Migrated to <code>uv</code> (And You Should Too)","text":"<p><code>uv</code> is a lightning-fast, all-in-one Python project tool written in Rust, combining package management, interpreter installation, and virtual environment creation. Key features include:</p> <ul> <li>Installing and switching between multiple CPython (and PyPy) builds</li> <li>Creating lightweight virtual environments</li> <li>Resolving dependencies with an absurdly fast pip-compatible resolver</li> <li>A <code>uvx</code> shim for running tools like Ruff or Black in isolated sandboxes:</li> <li><code>uvx black .</code> or <code>uvx ruff format .</code></li> </ul> <p>Result: fewer moving parts, faster setups, and consistent environments across laptop and CI images.</p>","tags":["Tooling","Python","Tutorial"]},{"location":"blog/2025/04/17/managing-python-on-macos-with-uv/#1-installing-uv","title":"1. Installing uv","text":"<pre><code># Install uv via Homebrew (Apple\u00a0Silicon &amp; Intel)\nbrew install uv\n</code></pre> <p>Note: <code>uv</code> auto-detects your architecture (Apple\u00a0Silicon or Intel).</p> <p>The same page shows a one\u2011liner curl installer if you're brew\u2011averse. Check it worked:</p> <pre><code># Check installation\nuv --version      # should print something like 0.6.x\nuv self upgrade   # keep it fresh\n</code></pre>","tags":["Tooling","Python","Tutorial"]},{"location":"blog/2025/04/17/managing-python-on-macos-with-uv/#2-installing-python-interpreters","title":"2. Installing Python interpreters","text":"<pre><code># Install specific Python versions\nuv python install 3.12.4          # exact version\nuv python install 3.13            # latest minor\nuv python install 3.9 3.10 3.11   # many at once\nuv python list                    # what's already cached\n</code></pre> <p>These archives live under <code>~/.cache/uv</code>, so they don't fight Homebrew or Xcode.</p> <p>Need the interpreter for this project only?</p> <pre><code># Pin Python version for the project\nuv python pin           # writes .python-version next to your code\n</code></pre> <p>Drop that file into Git and your team (or the CI) will automatically get the same binary.</p>","tags":["Tooling","Python","Tutorial"]},{"location":"blog/2025/04/17/managing-python-on-macos-with-uv/#3-virtual-environments-the-lazy-way","title":"3. Virtual environments the lazy way","text":"<pre><code># Create virtual environment\nuv venv                 # creates .venv with the pinned Python\nuv venv --python 3.11   # override if you're exploring\n</code></pre> <p>I rarely <code>activate</code> anymore as uv detects the <code>.venv</code> file and routes <code>uv pip</code>, <code>uv run</code>, or <code>uvx ruff</code> to the right interpreter. Pure convenience.</p> <p>A few patterns that shaved minutes from my workflow:</p> Task One\u2011liner Install deps into the current venv <code>uv pip install -r requirements.txt</code> Run a script with a different interpreter <code>uv run --python 3.10 scripts/train.py</code> Global tool in its own sandbox <code>uvx ruff format .</code>","tags":["Tooling","Python","Tutorial"]},{"location":"blog/2025/04/17/managing-python-on-macos-with-uv/#31-using-uvx-for-tools","title":"3.1 Using <code>uvx</code> for tools","text":"<p>With <code>uvx</code> you can run formatters or linters without touching your virtual environment:</p> <pre><code>uvx black .            # format code in an isolated sandbox\nuvx ruff check src/    # lint code without installing ruff globally\n</code></pre>","tags":["Tooling","Python","Tutorial"]},{"location":"blog/2025/04/17/managing-python-on-macos-with-uv/#4-coexisting-with-pyenv-if-you-must","title":"4. Co\u2011existing with pyenv (if you must)","text":"<ul> <li>Keep pyenv if you rely on its \"shim\" strategy to globally shadow <code>python</code> in your shell.</li> <li>Skip pyenv if project\u2011local versions and CI parity are your priority - uv handles that solo.</li> </ul> <p>From uv's perspective every interpreter in <code>$PATH</code> (even ones compiled by pyenv or Homebrew) is just \"system Python\". You can pass it to any <code>--python</code> flag and mix\u2011and\u2011match as needed.</p>","tags":["Tooling","Python","Tutorial"]},{"location":"blog/2025/04/17/managing-python-on-macos-with-uv/#5-mlspecific-niceties","title":"5. ML\u2011specific niceties","text":"<ul> <li>The PyTorch integration guide shows CUDA\u2011aware installs in one command - excellent for GPU vs. CPU builds on the same Mac.</li> <li>Binary wheels pulled by uv are cached, so re\u2011creating a venv to try a different version of scikit\u2011learn or TensorFlow feels instant.</li> </ul>","tags":["Tooling","Python","Tutorial"]},{"location":"blog/archive/2025/","title":"2025","text":""}]}
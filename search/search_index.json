{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Shared Intelligence","text":"<p>Tips &amp; war stories from the ML\u2011engineering trenches.</p> <p>\ud83d\udc4b Hi, I'm Slava!</p> <p>I'm a Berlin\u2011based Senior Machine Learning Engineer\u202fII at HubSpot (PhD) with 10+ years of experience turning cutting\u2011edge research into reliable, revenue\u2011generating products.</p> <p>I've built graph\u2011neural\u2011network fraud detection systems that save millions at Wayfair, large\u2011scale recommender systems and statistical experimentation tooling at OLX\u202fGroup, and now lead AI Signals initiatives at HubSpot.</p> <p>My professional passions include fraud\u202f&amp;\u202fscam detection, representation learning, recommender systems, LLMs\u202f&amp;\u202fAI\u202fagents, and MLOps\u2014topics you'll find explored throughout this blog.</p>"},{"location":"#what-youll-find-here","title":"What You'll Find Here","text":"<p>In this blog, you'll find:</p> <ul> <li>Technical tutorials and guides</li> <li>Machine Learning insights</li> <li>Best practices and tips</li> <li>Personal experiences and learnings</li> </ul> <p>My goal is to create a valuable resource for fellow practitioners and anyone interested in the real-world application of machine learning.</p>"},{"location":"#connect","title":"Connect","text":"<ul> <li>LinkedIn</li> <li>GitHub</li> </ul>"},{"location":"topics/","title":"\ud83d\udd0e Browse by Topic","text":""},{"location":"topics/#tag:mac","title":"Mac","text":"<ul> <li>            Setting up a MacBook for AI Engineering          </li> </ul>"},{"location":"topics/#tag:python","title":"Python","text":"<ul> <li>            Managing Python on macOS with uv          </li> </ul>"},{"location":"topics/#tag:tooling","title":"Tooling","text":"<ul> <li>            Managing Python on macOS with uv          </li> </ul>"},{"location":"topics/#tag:tutorial","title":"Tutorial","text":"<ul> <li>            Managing Python on macOS with uv          </li> <li>            Setting up a MacBook for AI Engineering          </li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2025/04/17/managing-python-on-macos-with-uv/","title":"Managing Python like an AI Engineer on macOS with uv","text":"","tags":["Tooling","Python","Tutorial"]},{"location":"blog/2025/04/17/managing-python-on-macos-with-uv/#tldr-bash-cheatsheet","title":"TL;DR Bash\u00a0Cheat\u2011sheet","text":"<pre><code>brew install uv        # install tool\nuv python install 3.12 # grab interpreter\nuv python pin          # lock version for repo\nuv venv                # create .venv\nuv pip install numpy pandas   # ML staples\nuv run train.py        # run with correct interpreter\nuv self upgrade        # update uv itself\n</code></pre>","tags":["Tooling","Python","Tutorial"]},{"location":"blog/2025/04/17/managing-python-on-macos-with-uv/#why-i-migrated-to-uv-and-you-should-too","title":"\ud83c\udf19 Why I Migrated to <code>uv</code> (And You Should Too)","text":"<p><code>uv</code> is a lightning-fast, all-in-one Python project tool written in Rust, combining package management, interpreter installation, and virtual environment creation. Key features include:</p> <ul> <li>Installing and switching between multiple CPython (and PyPy) builds</li> <li>Creating lightweight virtual environments</li> <li>Resolving dependencies with an absurdly fast pip-compatible resolver</li> <li>A <code>uvx</code> shim for running tools like Ruff or Black in isolated sandboxes:</li> <li><code>uvx black .</code> or <code>uvx ruff format .</code></li> </ul> <p>Result: fewer moving parts, faster setups, and consistent environments across laptop and CI images.</p>","tags":["Tooling","Python","Tutorial"]},{"location":"blog/2025/04/17/managing-python-on-macos-with-uv/#1-installing-uv","title":"1. Installing uv","text":"<pre><code># Install uv via Homebrew (Apple\u00a0Silicon &amp; Intel)\nbrew install uv\n</code></pre> <p>Note: <code>uv</code> auto-detects your architecture (Apple\u00a0Silicon or Intel).</p> <p>The same page shows a one\u2011liner curl installer if you're brew\u2011averse. Check it worked:</p> <pre><code># Check installation\nuv --version      # should print something like 0.6.x\nuv self upgrade   # keep it fresh\n</code></pre>","tags":["Tooling","Python","Tutorial"]},{"location":"blog/2025/04/17/managing-python-on-macos-with-uv/#2-installing-python-interpreters","title":"2. Installing Python interpreters","text":"<pre><code># Install specific Python versions\nuv python install 3.12.4          # exact version\nuv python install 3.13            # latest minor\nuv python install 3.9 3.10 3.11   # many at once\nuv python list                    # what's already cached\n</code></pre> <p>These archives live under <code>~/.cache/uv</code>, so they don't fight Homebrew or Xcode.</p> <p>Need the interpreter for this project only?</p> <pre><code># Pin Python version for the project\nuv python pin           # writes .python-version next to your code\n</code></pre> <p>Drop that file into Git and your team (or the CI) will automatically get the same binary.</p>","tags":["Tooling","Python","Tutorial"]},{"location":"blog/2025/04/17/managing-python-on-macos-with-uv/#3-virtual-environments-the-lazy-way","title":"3. Virtual environments the lazy way","text":"<pre><code># Create virtual environment\nuv venv                 # creates .venv with the pinned Python\nuv venv --python 3.11   # override if you're exploring\n</code></pre> <p>I rarely <code>activate</code> anymore as uv detects the <code>.venv</code> file and routes <code>uv pip</code>, <code>uv run</code>, or <code>uvx ruff</code> to the right interpreter. Pure convenience.</p> <p>A few patterns that shaved minutes from my workflow:</p> Task One\u2011liner Install deps into the current venv <code>uv pip install -r requirements.txt</code> Run a script with a different interpreter <code>uv run --python 3.10 scripts/train.py</code> Global tool in its own sandbox <code>uvx ruff format .</code>","tags":["Tooling","Python","Tutorial"]},{"location":"blog/2025/04/17/managing-python-on-macos-with-uv/#31-using-uvx-for-tools","title":"3.1 Using <code>uvx</code> for tools","text":"<p>With <code>uvx</code> you can run formatters or linters without touching your virtual environment:</p> <pre><code>uvx black .            # format code in an isolated sandbox\nuvx ruff check src/    # lint code without installing ruff globally\n</code></pre>","tags":["Tooling","Python","Tutorial"]},{"location":"blog/2025/04/17/managing-python-on-macos-with-uv/#4-coexisting-with-pyenv-if-you-must","title":"4. Co\u2011existing with pyenv (if you must)","text":"<ul> <li>Keep pyenv if you rely on its \"shim\" strategy to globally shadow <code>python</code> in your shell.</li> <li>Skip pyenv if project\u2011local versions and CI parity are your priority - uv handles that solo.</li> </ul> <p>From uv's perspective every interpreter in <code>$PATH</code> (even ones compiled by pyenv or Homebrew) is just \"system Python\". You can pass it to any <code>--python</code> flag and mix\u2011and\u2011match as needed.</p>","tags":["Tooling","Python","Tutorial"]},{"location":"blog/2025/04/17/managing-python-on-macos-with-uv/#5-mlspecific-niceties","title":"5. ML\u2011specific niceties","text":"<ul> <li>The PyTorch integration guide shows CUDA\u2011aware installs in one command - excellent for GPU vs. CPU builds on the same Mac.</li> <li>Binary wheels pulled by uv are cached, so re\u2011creating a venv to try a different version of scikit\u2011learn or TensorFlow feels instant.</li> </ul>","tags":["Tooling","Python","Tutorial"]},{"location":"blog/2025/04/19/setting-up-a-macbook-for-ai-engineering/","title":"Setting up a MacBook for AI Engineering","text":"<p>Here\u2019s my distilled, 10\u2011step workflow to transform a vanilla macOS install into a ready to-go AI engineering working station.</p> <ol> <li> <p>First of all, let's install Xcode Command Line Tools. These tools are the foundation for any type of software development (including DS).</p> <pre><code>xcode-select --install\n</code></pre> </li> <li> <p>Then install Homebrew. It is a package manager for macOS. You can follow instructions on their website or just run:</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> </li> <li> <p>Then I install these dependencies with brew:</p> <pre><code>brew install openssl readline sqlite3 xz zlib\n</code></pre> </li> <li> <p>I used to prefer iTerm2 over the standard Terminal due to its flexible configuration, but recently migrated to Warp. Warp offers a modern, Rust-based terminal experience with AI features integrated. You can download it from the Warp website. However, if you still prefer iTerm2, here's how I used to configure it:</p> </li> <li> <p>For configuring iTerm I prefer to do the following:</p> <ul> <li> <p>Setup Natural text editing:</p> </li> <li> <p>Go to Preferences \u2192 Profiles \u2192 Keys \u2192 Key Mappings</p> </li> <li>Press Presets\u2026 dropdown button</li> <li> <p>Select Natural Text Editing</p> </li> <li> <p>For changing color select the preferred preset from this repo. Then:</p> </li> <li>Go to Preferences \u2192 Profiles \u2192 Colors \u2192 Color Presets\u2026 \u2192 Import</li> <li>After importing your new color will be displayed in Color Presets</li> </ul> </li> <li> <p>Then I install and configure Zsh and Oh My Zsh:</p> <pre><code>brew install zsh\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n</code></pre> </li> <li> <p>Now you can configure your terminal with a <code>~/.zshrc</code> file. I use the next zsh plugins in my daily routine:</p> <pre><code>plugins=(\n  git brew vscode iterm2\n  themes screen macos bgnotify\n  docker docker-compose gcloud aws\n  python pyenv pylint virtualenv\n  zsh-autosuggestions zsh-syntax-highlighting)\n</code></pre> <p>A description of the plugins you can find here.</p> <p>Only the last two plugins (zsh-autosuggestions and zsh-syntax-highlighting) require additional installation. It's pretty simple, just check the following links:</p> <ul> <li>zsh-autosuggestions: https://github.com/zsh-users/zsh-autosuggestions</li> <li>zsh-syntax-highlighting: https://github.com/zsh-users/zsh-syntax-highlighting/</li> </ul> </li> <li> <p>I'm using the Powerlevel10k theme in Zsh. It has installation assistance that helps you configure Zsh your way. Just follow the instruction on their website.</p> <p>If you have any issues with fonts in another terminal, you can install fonts separately. For example, I use VSCode and its internal terminal very often. This instruction could help you configure the VSCode terminal to work with the Powerlevel10k theme.</p> </li> <li> <p>For the terminal I also install:</p> <ul> <li>pyenv for managing global Python versions via shims,</li> <li>uv for managing Python project dependencies and virtual environments,</li> <li>htop for process monitoring,</li> <li>gitmoji for customizing commit messages.</li> </ul> </li> <li> <p>And of course, I always install Cursor as my main IDE, Docker for containerization, and Ollama for running LLMs locally.</p> </li> </ol>","tags":["Tutorial","Mac"]},{"location":"blog/2025/04/19/setting-up-a-macbook-for-ai-engineering/#final-thoughts","title":"Final thoughts","text":"<p>By now you have the exact stack I lean on every day as an AI engineer - just the essentials that remove friction between an idea and a running model.</p>","tags":["Tutorial","Mac"]},{"location":"blog/archive/2025/","title":"2025","text":""}]}